<assembly name="CubeRover">

<!-- Import components to project -->
<!-- Drivers -->
  <import_component_type>Drv/BlockDriver/BlockDriverComponentAi.xml</import_component_type>

<!-- Services -->
  <import_component_type>Svc/RateGroupDriver/RateGroupDriverComponentAi.xml</import_component_type>
  <import_component_type>Svc/ActiveRateGroup/ActiveRateGroupComponentAi.xml</import_component_type>
  <import_component_type>Svc/LinuxTime/CubeRoverTimeComponentAi.xml</import_component_type>
  <import_component_type>Svc/TlmChan/TlmChanComponentAi.xml</import_component_type>
  <import_component_type>Svc/CmdDispatcher/CommandDispatcherComponentAi.xml</import_component_type>
  <import_component_type>Svc/ActiveLogger/ActiveLoggerComponentAi.xml</import_component_type>
  <import_component_type>Svc/Health/HealthComponentAi.xml</import_component_type>
  <import_component_type>CubeRover/WatchDogInterface/WatchDogInterfaceComponentAi.xml</import_component_type>

<!-- Specifics to CubeRover -->
  <import_component_type>CubeRover/GroundInterface/GroundInterfaceComponentAi.xml</import_component_type>
  <import_component_type>CubeRover/UdpInterface/UdpInterfaceComponentAi.xml</import_component_type>
  <import_component_type>CubeRover/NetworkManager/NetworkManagerComponentAi.xml</import_component_type>

<!-- Declaration of block driver that drive F-prime clocking and other async event -->
  <instance namespace="Drv" name="blockDriver" type="BlockDriver" base_id="1" base_id_window="20" />

<!-- Declaration of components handling synchronization of tasks -->
  <instance namespace="Svc" name="rateGroupDriver" type="RateGroupDriver" base_id="21"  base_id_window="20" />
  <instance namespace="Svc" name="rateGroupLowFreq" type="ActiveRateGroup" base_id="41" base_id_window="20" />
  <instance namespace="Svc" name="rateGroupMedFreq" type="ActiveRateGroup" base_id="61" base_id_window="20" />
  <instance namespace="Svc" name="rateGroupHiFreq" type="ActiveRateGroup" base_id="81" base_id_window="20" />

<!-- Declaration of time component that will be used by other module to capture time stamp -->
  <instance namespace="Svc" name="cubeRoverTime" type="CubeRoverTime" base_id="101"  base_id_window="20" />

<!-- Declaration of telemetry chan that gathers all telemetry parameters (synchronous, synchronized by rate group low freq) -->
  <instance namespace="Svc" name="tlmChan" type="TlmChan" base_id="121"  base_id_window="20" />

<!-- Declaration of the command dispatcher -->
  <instance namespace="Svc" name="cmdDispatcher" type="CommandDispatcher" base_id="141" base_id_window="20" />

<!-- Declaration of the ground interface service -->
  <instance namespace="CubeRover" name="groundInterface" type="GroundInterface" base_id="161" base_id_window="20" />

<!-- Declaration of the components that implement UDP interface (Lander RS422 Serial) -->
  <instance namespace="CubeRover" name="udpInterface" type="UdpInterface" base_id="181" base_id_window="20" />
      
<!-- Declaration of the components that implement NetworkManager and Wifi Stack -->
  <instance namespace="CubeRover" name="networkManager" type="NetworkManager" base_id="201" base_id_window="20" />

<!-- Declaration of the passive text logger component that logs events in non-volatile memory -->
<!-- For CubeRover - we use external FRAM memory to store data, i.e. a custom implementation of that component is necessary -->
  <instance namespace="Svc" name="activeLogger" type="ActiveLogger" base_id="221" base_id_window="20" />

<!-- Declaration of the health component -->
  <instance namespace="Svc" name="health" type="Health" base_id="301" base_id_window="20" />

<!-- Declaration of the WatchDog Interface component -->
  <instance namespace="CubeRover" name="watchDogInterface" type="WatchDogInterface" base_id="241" base_id_window="20" />
 
<!-- *********************************************************************************************************
        CONNECTION OF CYCLE PORTS BETWEEN COMPONENTS BLOCK DRIVER AND RATE GROUP COMPONENTS
     ********************************************************************************************************* 
      -->

<!-- Connect Block Driver "CycleOut" to input "CycleIn" (sync_input) of Rate Group Driver -->
  <connection name="blockDriver_to_rgDriver">
    <source component="blockDriver" port="CycleOut" type="Cycle" num="0"/>
    <target component="rateGroupDriver" port="CycleIn" type="Cycle" num="0"/>
  </connection>

<!-- Connect Rate Group driver to Rate Group "Low Frequency" (port 0) -->
  <connection name="rgDriver_to_rgLowFreq">
    <source component="rateGroupDriver" port="CycleOut" type="Cycle" num="0"/>
    <target component="rateGroupLowFreq" port="CycleIn" type="Cycle" num="0"/>
  </connection>

<!-- Connect Rate Group driver to Rate Group "Medium Frequency" (port 1) -->
  <connection name="rgDriver_to_rgMedFreq">
    <source component="rateGroupDriver" port="CycleOut" type="Cycle" num="1"/>
    <target component="rateGroupMedFreq" port="CycleIn" type="Cycle" num="0"/>
  </connection>

<!-- Connect Rate Group driver to Rate Group "High Frequency" (port 2-->
  <connection name="rgDriver_to_rgHiFreq">
    <source component="rateGroupDriver" port="CycleOut" type="Cycle" num="2"/>
    <target component="rateGroupHiFreq" port="CycleIn" type="Cycle" num="0"/>
  </connection>  

<!-- *********************************************************************************************************
        CONNECTION BETWEEN LOW FREQ RATE GROUP OUTPUT AND ALL DEPENDING COMPONENTS
     *********************************************************************************************************
     -->
  <!-- Connect output of telemetry Run input to update telemetry content (port 0) --> 
  <connection name="rgLowFreq_to_tlmChan_clk">
    <source component="rateGroupLowFreq" port="RateGroupMemberOut" type="Sched" num="0" />
    <target component="tlmChan" port="Run" type="Sched" num="0"/>
  </connection>

<!-- *********************************************************************************************************
        CONNECTION BETWEEN MEDIUM FREQ RATE GROUP OUTPUT AND ALL DEPENDING COMPONENTS
     *********************************************************************************************************
     -->
  <!-- Connect output of WatchDogInterface to stroke watchdog MSP430 (port 0) --> 
  <connection name = "rgMedFreq_to_watchDogInterface_clk">
    <source component = "rateGroupMedFreq" port = "RateGroupMemberOut" type = "Sched" num = "0" />
    <target component = "watchDogInterface" port = "Run" type = "Sched" num = "0"/>
  </connection>

<!-- *********************************************************************************************************
        CONNECTION BETWEEN HIGH FREQ RATE GROUP OUTPUT AND ALL DEPENDING COMPONENTS
     *********************************************************************************************************
     -->
  <!-- Connect output of health to ping all components (port 0) --> 
  <connection name = "rgHighFreq_to_health_clk">
    <source component = "rateGroupHighFreq" port = "RateGroupMemberOut" type = "Sched" num = "0" />
    <target component = "health" port = "Run" type = "Sched" num = "0"/>
  </connection>

  <connection name="rgMedFreq_to_networkManager">
    <source component="rateGroupMedFreq" port="RateGroupMemberOut" type="Sched" num="0" />
    <target component="networkManager" port="schedIn" type="sched" num="0"/>
  </connection>

<!-- *********************************************************************************************************
        CONNECTION BETWEEN HIGH FREQ RATE GROUP OUTPUT AND ALL DEPENDING COMPONENTS
     *********************************************************************************************************
     -->
      
  <!-- TODO -->

<!-- *********************************************************************************************************
        CONNECTION OF TIME PORTS BETWEEN CUBEROVER TIME ALL TIME-STAMPED COMPONENTS
     ********************************************************************************************************* 
      -->

  <connection name="rgLowFreq_to_cubeRoverTime">
    <source component="rateGroupLowFreq" port="Time" type="Time" num="0" />
    <target component="cubeRoverTime" port="timeGetPort" type="Time" num="0"/>
  </connection>

  <connection name="rgMedFreq_to_cubeRoverTime">
    <source component="rateGroupMedFreq" port="Time" type="Time" num="0" />
    <target component="cubeRoverTime" port="timeGetPort" type="Time" num="0"/>
  </connection>  

  <connection name="rgHiFreq_to_cubeRoverTime">
    <source component="rateGroupHiFreq" port="Time" type="Time" num="0" />
    <target component="cubeRoverTime" port="timeGetPort" type="Time" num="0"/>
  </connection>

  <connection name="blockDriver_to_cubeRoverTime">
    <source component="blockDriver" port="Time" type="Time" num="0" />
    <target component="cubeRoverTime" port="timeGetPort" type="Time" num="0"/>
  </connection>

  <connection name="groundInterface_to_cubeRoverTime">
    <source component="groundInterface" port="Time" type="Time" num="0" />
    <target component="cubeRoverTime" port="timeGetPort" type="Time" num="0"/>
  </connection>
  
  <connection name="udpInterface_to_cubeRoverTime">
    <source component="udpInterface" port="Time" type="Time" num="0" />
    <target component="cubeRoverTime" port="timeGetPort" type="Time" num="0"/>
  </connection>

  <connection name="networkManager_to_cubeRoverTime">
    <source component="networkManager" port="Time" type="Time" num="0" />
    <target component="cubeRoverTime" port="timeGetPort" type="Time" num="0"/>
  </connection>
      
  <!-- Connection of time between cubeRoverTime and active logger component -->
  <connection name = "activeLogger_to_cubeRoverTime">
    <source component = "activeLogger" port = "Time" type = "Time" num = "0" />
    <target component = "cubeRoverTime" port = "timeGetPort" type = "Time" num = "0" />
  </connection>

<!-- *********************************************************************************************************
        CONNECTION OF MONITORED COMPONENTS TO TELEMETRY CHAN COMPONENT
     ********************************************************************************************************* 
      -->
      <!--
      Summary of mapping of telemetry channels:
      Port # 0 : Rate Group Low Frequency
      Port # 1 : Rate Group Medium Frequency
      Port # 2 : Rate Group High Frequency
      Port # 3 : TBD
      -->

      <!-- Rate group low Freq to telemetry channel (port 0) -->
  <connection name="rgLowFreq_to_chanTlm">
    <source component="rateGroupLowFreq" port="Tlm" type="Tlm" num="0" />
    <target component="tlmChan" port="TlmRecv" type="Tlm" num="0" />
  </connection>

      <!-- Rate group Medium Freq to telemetry channel (port 1) -->
  <connection name="rgMedFreq_to_chanTlm">
    <source component="rateGroupMedFreq" port="Tlm" type="Tlm" num="0" />
    <target component="tlmChan" port="TlmRecv" type="Tlm" num="0" />
  </connection>

      <!-- Rate group Medium Freq to telemetry channel (port 2) -->
  <connection name="rgHiFreq_to_chanTlm">
    <source component="rateGroupHiFreq" port="Tlm" type="Tlm" num="0" />
    <target component="tlmChan" port="TlmRecv" type="Tlm" num="0" />
  </connection>

  <!-- Ground Interface to telemetry channel (port 3) -->
  <connection name="groundInterface_to_chanTlm">
    <source component="groundInterface" port="Tlm" type="Tlm" num="0" />
    <target component="tlmChan" port="TlmRecv" type="Tlm" num="0" />
  </connection>

    <!-- Radio serial and Wifi UDP interface to telemetry channel (port 4) -->
  <connection name="udpInterface_to_chanTlm">
    <source component="udpInterface" port="Tlm" type="Tlm" num="0" />
    <target component="tlmChan" port="TlmRecv" type="Tlm" num="0" />
  </connection>

  <!-- Network Manager to telemetry channel (port 5) -->
  <connection name="networkManager_to_chanTlm">
    <source component="networkManager" port="Tlm" type="Tlm" num="0" />
    <target component="tlmChan" port="TlmRecv" type="Tlm" num="0" />
  </connection>
      
<!-- *********************************************************************************************************
        CONNECTION OF DOWNLINK COMPONENTS 
     ********************************************************************************************************* 
      -->
      
  <connection name="chanTlm_to_groundInterface">
    <source component="tlmChan" port="PktSend" type="Com" num="0" />
    <target component="groundInterface" port="tlmDownlink" type="Com" num="0" />
  </connection>
      
  <connection name="groundInterface_to_udpInterface">
    <source component="groundInterface" port="downlinkBufferSend" type="Fw::BufferSend" num="0" />
    <target component="udpInterface" port="downlinkDatagram" type="Fw::BufferSend" num="0"/>
  </connection>
      
  <connection name="groundInterface_to_networkManager">
    <source component="groundInterface" port="downlinkBufferSend" type="Buffer" num="0" />
    <target component="networkManager" port="downlink" type="Buffer" num="0" />
  </connection>
      
  <connection name="udpInterface_to_watchDogInterface">
      <source component="udpInterface" port="forwardDatagram" type="Fw::BufferSend" num="0" />
    <target component="watchDogInterface" port="downlink" type="Fw::BufferSend" num="0"/>
  </connection>
      
<!-- *********************************************************************************************************
        CONNECTION OF UPLINK COMPONENTS
     ********************************************************************************************************* 
      -->
      
  <connection name="watchDogInterface_to_udpInterface">
      <source component="watchDogInterface" port="uplink" type="Fw::BufferSend" num="0" />
    <target component="udpInterface" port="uplinkData" type="Fw::BufferSend" num="0"/>
  </connection>

  <connection name="udpInterface_to_groundInterface">
    <source component="udpInterface" port="forwardDatagramPayload" type="Fw::BufferSend" num="0" />
    <target component="groundInterface" port="cmdUplink" type="Fw::BufferSend" num="0"/>
  </connection>

  <connection name="networkManager_to_groundInterface">
    <source component="networkManager" port="uplink" type="Fw::BufferSend" num="0" />
    <target component="groundInterface" port="cmdUplink" type="Fw::BufferSend" num="0"/>
  </connection>

  <connection name="groundInterface_to_cmdDispatcher">
    <source component="groundInterface" port="cmdDispatch" type="Fw::Com" num="0" />
    <target component="cmdDispatcher" port="seqCmdBuff" type="Fw::Com" num="0"/>
  </connection>
      
  <!-- *********************************************************************************************************
        CONNECTION OF MONITORED COMPONENTS TO TELEMETRIC ACTIVE LOGGER COMPONENT
       ********************************************************************************************************* 
      -->

      <!-- Rate group low freq to active logger -->
  <connection name = "rgLowFreq_to_aLogger">
    <source component = "rateGroupLowFreq" port = "Log" type = "Log" num = "0" />
    <target component = "activeLogger" port = "LogRecv" type = "Log" num = "0" />
  </connection>

      <!-- Rate group med freq to active logger -->
  <connection name = "rgMedFreq_to_aLogger">
    <source component = "rateGroupMedFreq" port = "Log" type = "Log" num = "0" />
    <target component = "activeLogger" port = "LogRecv" type = "Log" num = "0" />
  </connection>

      <!-- Rate group high freq to active logger -->
  <connection name = "rgHiFreq_to_aLogger">
    <source component = "rateGroupHiFreq" port = "Log" type = "Log" num = "0" />
    <target component = "activeLogger" port = "LogRecv" type = "Log" num = "0" />
  </connection>
  
</assembly>
